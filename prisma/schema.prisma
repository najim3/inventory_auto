generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(uuid())
  name           String
  email          String @unique
  hashedPassword String
  roleId         String
  role           Role   @relation(fields: [roleId], references: [id])

  sales     Sale[]
  purchases Purchase[]
  payments  Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  users           User[]
  rolePermissions RolePermission[]
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Product {
  id         String @id @default(uuid())
  name       String
  sku        String @unique
  categoryId String
  brandId    String
  unitPrice  Float
  stock      Int    @default(0)

  category       Category         @relation(fields: [categoryId], references: [id])
  brand          Brand            @relation(fields: [brandId], references: [id])
  purchaseItems  PurchaseItem[]
  salesItems     SalesItem[]
  PurchaseReturn PurchaseReturn[]
  SalesReturn    SalesReturn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id      String  @id @default(uuid())
  name    String
  phone   String?
  email   String?
  address String?

  purchases Purchase[]
  payments  Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id      String  @id @default(uuid())
  name    String
  phone   String?
  email   String?
  address String?

  sales    Sale[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id          String   @id @default(uuid())
  supplierId  String
  userId      String
  totalAmount Float
  paidAmount  Float
  dueAmount   Float
  date        DateTime @default(now())

  supplier       Supplier         @relation(fields: [supplierId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  items          PurchaseItem[]
  PurchaseReturn PurchaseReturn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseItem {
  id         String @id @default(uuid())
  purchaseId String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  purchase Purchase @relation(fields: [purchaseId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id          String   @id @default(uuid())
  customerId  String
  userId      String
  totalAmount Float
  paidAmount  Float
  dueAmount   Float
  date        DateTime @default(now())

  customer    Customer      @relation(fields: [customerId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  items       SalesItem[]
  SalesReturn SalesReturn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalesItem {
  id         String @id @default(uuid())
  saleId     String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id         String      @id @default(uuid())
  userId     String
  customerId String?
  supplierId String?
  amount     Float
  type       PaymentType
  date       DateTime    @default(now())

  user     User      @relation(fields: [userId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  supplier Supplier? @relation(fields: [supplierId], references: [id])
}

enum PaymentType {
  INCOMING // Payment from customer
  OUTGOING // Payment to supplier
}

model PurchaseReturn {
  id         String   @id @default(uuid())
  purchaseId String
  productId  String
  quantity   Int
  date       DateTime @default(now())

  purchase Purchase @relation(fields: [purchaseId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

model SalesReturn {
  id        String   @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  date      DateTime @default(now())

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
